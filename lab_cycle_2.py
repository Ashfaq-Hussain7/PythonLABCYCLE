# -*- coding: utf-8 -*-
"""Lab_Cycle_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ClavdP4c2GpNE7TJhk6twCOMBfknoMs
"""

#function to calculate the number of rabbits

def calculate(m):            
   m1=1                      #m-months entered by the user
   m2=1
   
   if m==1:
     display(1,m1)
     return m1

   elif m==2:
     display(1,m1)
     display(2,m2)
     return m2
   
   else:
    if m!=0:
     display(1,m1)
     display(2,m2)
     
     for i in range(3,m+1):
       m3=m1+m2
       display(i,m3)
       m1=m2
       m2=m3
     return m3
    
    else:
      print("\n***No pair of Rabbits are put into the Field***\n")
      return 0;

#function to display the values in table format

def display(j,m3):         
   print("_"*50)
   print ("\t",j,"\t|\t",m3)

#function take input and give output

def main():                 
   m=int(input("Enter the months: "))       
  
   print("\n",end='')
   print("-"*50)
   print("\t***TABLE OF RABBIT PAIRS***")
   print("-"*50)
   print("\tMONTH \t| Pair of Rabbits")
   
   n=calculate(m)           # n- number of pairs at the end of a months
   
   print("-"*50)
   print("\nTotal number of Rabbit Pairs at the end of ",end="")
   print(m," months is: ",n,"\n")

main()

#function to merge and sort the list
def merge_sort(list1,list2):                                    
   f_list=list1+list2
   f_list.sort()
   return f_list

#function to sort the individual list
def final_sort(l1,l2):                                         
   l1.sort()
   l2.sort()
   final_list=merge_sort(l1,l2)
   print("5. Single Sorted list         :",final_list)

#function to evaluate the mathematical function
def function(l):                                               
   l_function=[]        # l_function - list of result of the expression
   for i in range(0,len(l)):             #f(x)=x^{2}-x
      l_function.append(l[i]**2 -l[i])
   print("4. Values of functions        :",l_function)
   final_sort(l,l_function)

#function to rewrite the list without duplication
def duplication(l):                                            
   l_dupe=tuple(set(l))
   l_dupe=list(l_dupe)
   print("3. List without duplication   :",l_dupe)
   function(l_dupe)

#function to convert the list to tuple
def list_tuple(l):                                            
   l_tuple=tuple(i for i in l)
   print("2.Tuple by list Comprehension :",l_tuple)
   duplication(l_tuple)

#function to rotate the list
def rotate(l):                                                 
   x= int(input("\n1. Enter Number of rotation: "))
   temp=[]
   if x>len(l):                     #Condition to avoid repeated looping
      x = int(x%len(l))   
   for i in range(len(l)-x,len(l)):
     #print(len(l),x,i)
     temp.append(l[i])
   for i in range(0,len(l)-x):
     temp.append(l[i])
   print("\t***Rotated List***     :",temp)

#main function to get the list
def main():                                                   
   l_string=[]
   print("\n\tList of String to list of Integers and operations.")
   print("_"*70)
   l_string=input("Enter Numbers separated by space : ")     
   l_string=list(l_string.split(" "))    #l_string - list of string         
   print("\n***List of string***\n",l_string)
   l_int=[]                              #l_int - list of integers
   for i in l_string:
      l_int.append(int (i))
   print("\n***List of Integers***\n",l_int)
   print("_"*70)
   rotate(l_int)                                     
   list_tuple(l_int)                                 

main()

import json as js
import pandas as pd
def c_list(path):
  text_file=open(path,'r')
  list_file=text_file.readlines()
  text_file.close()
  return list_file
def d_list(list_file):
  a=int(input("enter range of element to display : "))
  print(list_file[0:a])

def list_dic(path):
  text_file=open(path)
  dic_list=js.load(text_file)
  return dic_list

def d_dic(dic_list):
  a=int(input("enter range of element to display : "))
  print(dic_list[0:a],"\n")

def setosa(path):
  text_file=pd.read_json(path)
  text_file.set_index("species",inplace=True)
  detail=text_file.loc["setosa"]
  return detail
def d_flower(detail):
  print(detail,"\n")

def max_min(path):
  text_file=pd.read_json(path)
  list_file=text_file.groupby("species")
  max=list_file.max()
  min=list_file.min()
  max_l=[]
  max_w=[]
  min_l=[]
  min_w=[]
  for i in range(0,len(max)):
    max_l.append(max.sepalLength[i])
    max_w.append(max.sepalWidth[i])
    min_l.append(min.sepalLength[i])
    min_w.append(min.sepalWidth[i])
  for i in range(0,len(max)):
    print("the max area of sepal of species",max.index[i]," : ",round(max_l[i]*max_w[i],2))
  print("\n")
  for i in range(0,len(max)):
    print("the min area of sepal of species",min.index[i]," : ",round(min_l[i]*min_w[i],2))
  print("\n")
  max_lp=[]
  max_wp=[]
  min_lp=[]
  min_wp=[]
  for i in range(0,len(max)):
    max_lp.append(max.petalLength[i])
    max_wp.append(max.petalWidth[i])
    min_lp.append(min.petalLength[i])
    min_wp.append(min.petalWidth[i])
  for i in range(0,len(max)):
    print("the max area of petal of species",max.index[i]," : ",round(max_lp[i]*max_wp[i],2))
  print("\n")
  for i in range(0,len(max)):
    print("the min area of petal of species",min.index[i]," : ",round(min_lp[i]*min_wp[i],2))
  print("\n")

def sorted(path):
  text_file=pd.read_json(path)
  totalarea=[]
  for i in range(len(text_file)):
    sepal=text_file.sepalLength[i]*text_file.sepalWidth[i]
    petal=text_file.petalLength[i]*text_file.petalWidth[i]
    totalarea.append(round(sepal+petal,2))
  totalArea=pd.DataFrame(totalarea,columns=["totalarea"])
  new=pd.concat([text_file,totalArea],axis=1)
  new1=new.drop(columns=["sepalLength","sepalWidth","petalLength","petalWidth"])
  new2=new1.sort_values(by=['totalarea'])
  sortedlist=new2.to_dict('records')
  a=int(input("enter range of sorted list to display : "))
  print(sortedlist[0:a])


  

path="/content/iris.json"

list_file=c_list(path)
d_list(list_file)
dic_file=list_dic(path)
d_dic(dic_file)
setosa_list=setosa(path)
d_flower(setosa_list)
max_min(path)
sorted(path)

import random

class Box:
  def __init__(self,*arg):
    #if all arguements are same,cube prism is initialised.
    if (arg[0]==arg[1]==arg[2]):
      self._length = arg[0]
      self.__breadth = arg[0]
      self.__height = arg[0]
    #if any two arguements are same, the square prism is initialised
    elif (arg[0]==arg[1] or arg[1]==arg[2] or arg[0]==arg[2]):
      if (arg[0]==arg[1]):
        self._length = arg[0]
        self._breadth = arg[0]
        self._height = arg[1]
      elif (arg[1]==arg[2]):
        self._length = arg[1]
        self._breadth = arg[1]
        self._height = arg[0]
      elif (arg[0]==arg[2]):
        self._length = arg[0]
        self._breadth = arg[0]
        self._height = arg[1]       
    #if three arguements are different , rectangular prism is initialised.
    else:
      self._length = arg[0]
      self._breadth = arg[1]
      self._height = arg[2]

  #funtion to calculate area
  def calc_area(self):
    self.__area = self._length*self._breadth
    return self.__area
  #funtion to calculate volume
  def calc_volume(self):
    self.__volume = self._length*self._breadth*self._height
    return self.__volume
  #funtion to print area
  def display_area(self):
    print("The area is ",self.__area)
  #funtion to print volume
  def display_volume(self):
    print("The volume is ",self.__volume,"\n")

A = 15
box = [Box(random.randint(1,1000),random.randint(1,1000),random.randint(1,1000)) for i in range(A)]
area = [i.calc_area() for i in box]
volume = [i.calc_volume() for i in box]
ratio = [x//y for x,y in zip(volume,area)]
index = ratio.index(max(ratio))
print("***Box with Maximum Volume:Area ratio***")
print("Area Of The Boxes = ",area[index])
print("Volume Of The Boxes = ",volume[index])
print("Ratio = ",max(ratio))

#base class 
class threeD_Shapes:
  def printVolume(self):
    print("\n***The Volume is***\n",round(self._volume,3))

  def printArea(self):
    print("\n***The Area is***\n",round(self._area,3))
  
#derived class 1
class cylinder(threeD_Shapes):
  #initialisation using constructor
  def __init__(self,r,h):
    self._radius = r
    self._height = h

  def calc_area(self):
    self._area = 2*3.14*self._radius*(self._radius+self._height)

  def calc_volume(self):
    self._volume = round((3.14*self._radius*self._radius*self._height),2)

#derived class 2
class sphere(threeD_Shapes):
    #initialisation using constructor
    def __init__(self,r):
      self._radius = r
    def calc_area(self):
      self._area = 4*3.14*self._radius*self._radius
    def calc_volume(self):
      self._volume = round(((4/3)*3.14*(self._radius**3)),2)

#object of class cylinder for calculating the area and volume of cylinder
cyl_obj = cylinder(int(input("Enter the radius of the cylinder: ")),int(input("Enter the height of the cylinder: ")))
cyl_obj.calc_area()
cyl_obj.printArea()
cyl_obj.calc_volume()
cyl_obj.printVolume()

#object of class sphere for calculating the area and volume of sphere
sph_obj = sphere(int(input("\nEnter the radius of the sphere: ")))
sph_obj.calc_area()
sph_obj.calc_volume()
sph_obj.printArea()
sph_obj.printVolume()

